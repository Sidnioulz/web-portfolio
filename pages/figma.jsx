import fetch from 'isomorphic-unfetch';
import PropTypes from 'prop-types';
import PortfolioHead from 'components/PortfolioHead';
import StyleColorBlock from 'components/figma/StyleColorBlock';

function figmaRgb2hex(fill) {
  return `#${
    `00${Math.round((fill.r * 255)).toString(16)}`.slice(-2)}${
    `00${Math.round((fill.g * 255)).toString(16)}`.slice(-2)}${
    `00${Math.round((fill.b * 255)).toString(16)}`.slice(-2)}`;
}


const Page = props => (
  <>
    <PortfolioHead title="Figma Styles to HTML" />
    <h1>Figma Styles to SCSS</h1>
    <p>
      {'This page is generated by using the Figma Styles API. Find the code in '}
      <a href="https://github.com/Sidnioulz/web-portfolio/">the repository for my portfolio</a>
      {'.'}
    </p>
    <div style={{ display: 'flex', 'flex-direction': 'row' }}>
      <ul style={{ flex: '0 0 auto', margin: '0' }}>
        {props.styles.map(styleDef => (
          <li key={styleDef.key}><StyleColorBlock style={styleDef} /></li>
        ))}
      </ul>
      <div style={{ flex: '1 0 auto', margin: '0 0 0 60px' }}>
        <h3>SCSS</h3>
        <code>
          <pre>
            {'$colors: ('}
            <br />
            {props.styles.map(styleDef => (
              <>
                {`  '${styleDef.name}': ${figmaRgb2hex(styleDef.fill)},`}
                <br />
              </>
            ))}
            {');'}
          </pre>
        </code>
      </div>
      <p>
        {'Support for font styles is coming soon.'}
      </p>
    </div>
    <style jsx>
      {`
      li {
        list-style: none;
        margin: 0;
        height: 36px;
      }
    `}
    </style>
  </>
);

Page.propTypes = {
  styles: PropTypes.arrayOf(PropTypes.shape({
    key: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    node_id: PropTypes.string.isRequired,
    style_type: PropTypes.oneOf(['TEXT', 'FILL']).isRequired,
    description: PropTypes.string,
  })),
};

Page.defaultProps = {
  styles: [],
};

Page.getInitialProps = async function () {
  const res = await fetch('https://api.figma.com/v1/teams/711400914227417571/styles?page_size=100', {
    headers: {
      'X-FIGMA-TOKEN': process.env.FIGMA_TOKEN,
    },
  });
  const resJson = await res.json();

  const { styles } = resJson.meta;
  const files = Array.from(new Set(styles.map(s => s.file_key)));

  const nodeRes = {};
  await Promise.all(files.map(async (fileKey) => {
    const nodeIds = styles
      .filter(s => s.file_key === fileKey)
      .filter(style => style.style_type === 'FILL')
      .map(s => s.node_id)
      .join(',');

    if (nodeIds) {
      const fetchRes = await fetch(`https://api.figma.com/v1/files/${fileKey}/nodes?ids=${nodeIds}`, {
        headers: {
          'X-FIGMA-TOKEN': process.env.FIGMA_TOKEN,
        },
      });
      const json = await fetchRes.json();

      nodeRes[fileKey] = json.nodes;
    }
  }));

  // const nodeStyles = nodeResJsons.map(j => j.nodes).flat();
  //
  // console.log(nodeStyles);


  return {
    styles: styles
      .filter(style => style.style_type === 'FILL')
      .sort((a, b) => a.name.localeCompare(b.name))
      .map(style => ({
        key: style.key,
        name: style.name,
        // only support one layer
        fill: nodeRes[style.file_key][style.node_id].document.fills[0].color,
      })),
  };
};


export default Page;
