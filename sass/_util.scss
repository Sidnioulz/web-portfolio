@mixin map-to-mixin($map) {
  @each $prop, $value in $map {
      #{$prop}: $value;
  }
}

@mixin link-decorator($height: null, $color: null, $line: null) {

  // .content a {
  //   color: #111;
  //   padding: 0;
  //   text-decoration: none;
  //   background-image: linear-gradient(
  //     transparent 0%,
  //     transparent calc(50% - 8px),
  //     rgba(0, 255, 0, 0.35) calc(50% - 8px),
  //     rgba(0, 255, 0, 0.35) 100%
  //   );
  //   transition: background-position 120ms ease-in-out, padding 120ms ease-in-out;
  //   background-size: 100% 200%;
  //   background-position: 0 0;
  // }
  //
  // .content a:hover {
  //   padding: 2px 0 4px 0;
  //   background-image: linear-gradient(
  //     transparent 0%,
  //     transparent calc(50% - 8px),
  //     rgba(0, 255, 0, 1) calc(50% - 8px),
  //     rgba(0, 255, 0, 1) 100%
  //   );
  //   background-position: 0 100%;
  // }



  background-color: transparent;
  @if $line != false {
    background-image: url('/static/images/hyperlink-sprite.png');
    background-repeat: repeat-x;
    background-position: 0 -185px; // up to 23 text height - 200 sprite height
  }

  @if $height != null {
    color: $color;
  } @else {
    color: get-color('Anthracite');
  }
  text-decoration: none;
  transition: background-color 250ms cubic-bezier(.4, 0, .2, 1);

  @if $height != null {
    height: $height;
  }

  &:focus {
    outline: none !important;
  }

  &:hover:not(:disabled),
  &:focus:not(:disabled) {
    @if $line != false {
      background-position: 0 15px; // up to 23 text height - 8 img height
      background-color: get-color('Poussin');
    } @else {
      background-color: get-color('Vanille');
    }
  }
}
